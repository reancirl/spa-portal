<?php

namespace Tests\Feature;

use App\Models\Dealer;
use App\Models\Role;
use App\Models\User;
use App\Models\UserRole;
use Illuminate\Database\Eloquent\Builder;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Support\Arr;
use Tests\TestCase;

class SalesConsultantControllerTest extends TestCase
{
    use RefreshDatabase, WithFaker;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->seed();
    }
    /**
     * A basic feature test example.
     *
     * @return void
     */
    public function auth_user()
    {
        $dealers = Dealer::factory()->count(10)->create();
        $user = User::factory()->create([
            'dealer_id' => 1
        ]);
        $this->actingAs($user);
        return $dealers;
    }

    public function test_store_salesConsultant()
    {
        $this->auth_user();

        $formData = [
            'first_name'      => $this->faker->firstName(),
            'last_name'       => $this->faker->lastName(),
            'crm_id'          => $this->faker->randomNumber(),
            'email'           => $this->faker->email(),
        ];

        $role = Role::where('slug','sales_consultant')->firstOrFail();
        $response = $this->post('/api/v1/sales/consultant', $formData);
        $response->dump();
        $response->assertStatus(200);
        $resData = json_decode($response->getContent());
        $this->assertDatabaseHas('users', [
            'first_name'       => $formData['first_name'],
            'last_name'        => $formData['last_name'],
            'crm_id'           => $formData['crm_id'],
            'email'            => $formData['email'],
        ]);

        $this->assertDatabaseHas('user_roles', [
            'user_id'          => $resData->data[0]->id,
            'role_id'          => $role->id,
        ]);

    }

    public function test_update_salesConsultant()
    {
        $this->auth_user();
        $user = User::factory()->create();
        $formData = [
            'first_name'      => $this->faker->firstName() .'s',
            'last_name'       => $this->faker->lastName().'s',
            'crm_id'          => $this->faker->randomNumber(),
            'email'           => 'test_'.$this->faker->email(),
        ];

        $response = $this->put("/api/v1/sales/consultant/$user->id", $formData);
        $response->dump();
        $response->assertStatus(200);

        $this->assertDatabaseHas('users', [
            'first_name'       => $formData['first_name'],
            'last_name'        => $formData['last_name'],
            'crm_id'           => $formData['crm_id'],
            'email'            => $formData['email'],
        ]);
    }

    public function test_index_salesConsultant()
    {
        $this->auth_user();
        $users = User::factory()->count(10)->create();

        $users->each(function($item){
             UserRole::create([
                'user_id' => $item->id,
                'role_id' =>  Arr::random([1, 2, 3])
            ]);
        });


        $user = User::whereHas('userRoles.role', function (Builder $query) {
            $query->where('slug', 'sales_consultant');
        })->get();


        $response = $this->get("/api/v1/sales/consultant");
        $response->dump();
        $response->assertStatus(200);

    }

}
