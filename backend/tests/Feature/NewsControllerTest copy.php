<?php

namespace Tests\Feature;

use App\Models\Dealer;
use App\Models\News;
use App\Models\User;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Tests\TestCase;

class NewsControllerTest extends TestCase
{
    use RefreshDatabase, WithFaker;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->seed();
    }
    /**
     * A basic feature test example.
     *
     * @return void
     */


    public function auth_user()
    {
        $dealers = Dealer::factory()->count(10)->create();
        $user = User::factory()->create([
            'dealer_id' => 1
        ]);
        $this->actingAs($user);
        return $dealers;
    }


    public function test_index_news()
    {
        $dealers =  $this->auth_user();

        News::factory()->count(3)->create([
            'dealers' => $dealers->pluck('id'),
            'created_by_user_id' => auth()->user()->id,
            'updated_by_user_id' => auth()->user()->id,
        ]);
        News::factory()->count(2)->create([
            'dealers' => null,
            'created_by_user_id' => auth()->user()->id,
            'updated_by_user_id' => auth()->user()->id,
        ]);

        $dump = News::query()
            ->whereJsonContains('dealers', [auth()->user()->dealer->id])
            ->orderBy('published_at', 'desc')
            ->count();
        // dd($dump);

        $response = $this->get('/api/v1/news');
        $response->assertStatus(200);
    }

    public function test_store_news()
    {
        $dealers =  $this->auth_user();

        $formData = News::factory()->make([
            'dealers'  => json_encode($dealers->pluck('id')),
        ])->toArray();

        $response = $this->post('/api/v1/news', $formData);
        $response->assertStatus(200);
    }
    public function test_update_news()
    {
        $dealers =  $this->auth_user();

        $news = News::factory()->create([
            'dealers'  => json_encode($dealers->pluck('id')),
        ]);

        $formData = [
            'title' => 'updated',
            'slug' => 'updated',
            'image' => 'updated',
            'summary' => 'updated',
            'content' => 'updated',
            'content_url' => 'updated',
            'dealers' => 'updated',
            'precedence' => 99,
            'featured' => false,
            'status' => false,
        ];

        $response = $this->put("/api/v1/news/$news->id", $formData);
        $response->assertStatus(200);

        $this->assertDatabaseHas('news', [
            'title' => $formData['title'],
            'slug' => $formData['slug'],
            'image' => $formData['image'],
            'summary' => $formData['summary'],
            'content' => $formData['content'],
            'content_url' => $formData['content_url'],
            'dealers' => $formData['dealers'],
            'precedence' => $formData['precedence'],
            'featured' => $formData['featured'],
            'status' => $formData['status'],
        ]);
        $this->assertDatabaseMissing('news', [
            'title' => 'test'
        ]);
    }

    public function test_delete_news()
    {
        $dealers =  $this->auth_user();

        $news = News::factory()->create([
            'dealers'  => json_encode($dealers->pluck('id')),
        ]);

        $response = $this->delete("/api/v1/news/$news->id");
        $response->assertStatus(200);
    }
}
