<?php

namespace Tests\Feature;

use App\Models\Asset;
use App\Models\Dealer;
use App\Models\DealerGroup;
use App\Models\DealerZone;
use App\Models\Leads;
use App\Models\Quotation;
use App\Models\ReportTypes;
use App\Models\Reservation;
use App\Models\Role;
use App\Models\TestDrive;
use App\Models\User;
use App\Models\UserLog;
use App\Models\UserRole;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Tests\TestCase;

class ReportControllerTest extends TestCase
{
    use RefreshDatabase, WithFaker;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->seed();
    }


    /**
     * A basic feature test example.
     *
     * @return void
     */
    public function auth_user()
    {
        // $dealers = Dealer::factory()->count(10)->create();
        $user = User::factory()->create([
            'dealer_id' => 1
        ]);
        $this->actingAs($user);
        // return $dealers;
    }



    public function test_download_report()
    {
        $this->auth_user();
        // $dealers_random = Dealer::factory()->count(5)->create();

        $group = DealerGroup::factory()->create([
            'name' => 'ABC corp.'
        ]);
        $zone = DealerZone::factory()->create([
            'name' => 'zone 1'
        ]);


        $dealer_ids = Dealer::factory()->count(5)->create([
            // 'group_id' => $group->id,
            'zone_id'  => $zone->id
        ]);

        $dealer1 = Dealer::factory()->create([
            'group_id' => $group->id,
            'zone_id'  => $zone->id
        ]);

        $dealer = Dealer::factory()->create([
            'group_id' => $group->id,
            'zone_id'  => $zone->id
        ]);

        $leads = Leads::factory()->count(3)->create([
            'dealer_id' => $dealer->id
        ]);

        $quo = Quotation::factory()->count(3)->create([
            'dealer_id' => $dealer->id,
            'assigned_sc_user_id' => auth()->user()->id
        ]);
        $testDrive = TestDrive::factory()->count(5)->create([
            'dealer_id' => $dealer->id,
            'assigned_sc_user_id' => auth()->user()->id
        ]);
        $reserv = Reservation::factory()->count(7)->create([
            'dealer_id' => $dealer->id,
            'assigned_sc_user_id' => auth()->user()->id
        ]);
        $asset = Asset::factory()->count(8)->create([
            'dealers' => Dealer::get()->pluck('id')
        ]);

        $deal =  Dealer::factory()->create([
            'group_id' => $group->id,
            'zone_id'  => $zone->id
        ]);
        //current expecting 7  user logs
        $user_dealer = User::factory()->create([
            'dealer_id' => $deal->id
        ]);

        $user_log = UserLog::factory()->count(7)->create([
            'user_id' => $user_dealer->id,
        ]);


        $user_logx = UserLog::factory()->count(10)->create([
            'user_id' => auth()->user()->id,
        ]);


        $user_dealer_sales = Dealer::factory()->create([
            'group_id' => $group->id,
            'zone_id'  => $zone->id
        ]);

        $role = Role::where('slug', 'sales_consultant')->firstOrFail();
        $sales_consultant = User::factory()->count(12)->create([
            'dealer_id' => $user_dealer_sales->id,
            'crm_id' => $this->faker->randomNumber()
        ]);
        $sales_consultant->each(function ($item) use ($role) {
            UserRole::create([
                'user_id' => $item->id,
                'role_id' => $role->id
            ]);
        });


        //ss
        $sales_consultant_other = User::factory()->count(10)->create([
            'dealer_id' => $deal->id,
            'crm_id' => $this->faker->randomNumber()
        ]);
        $sales_consultant_other->each(function ($item) use ($role) {
            UserRole::create([
                'user_id' => $item->id,
                'role_id' => $role->id
            ]);
        });

        $formData = [
            // 'dealer_group_id'          => $group->id,
            // 'dealer_zone_id'           => $zone->id,
            'name'                   => ReportTypes::SALES_CONSULTANTS,
            // 'dealer_id' => $dealer_ids->pluck('id')
            'dealer_id' => [$user_dealer_sales->id]
        ];

        $response = $this->post('/api/v1/reports/index', $formData, ['Accept' => 'application/json']);
        $response->dump();
        $response->assertStatus(200);
    }
}
